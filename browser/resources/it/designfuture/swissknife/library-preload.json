{
	"version": "2.0",
	"name": "it.designfuture.swissknife.library-preload",
	"modules": {
		"it/designfuture/swissknife/Component.js": "sap.ui.define([\r\n\t\"sap/ui/core/UIComponent\",\r\n\t\"sap/ui/model/json/JSONModel\",\r\n\t\"sap/ui/model/resource/ResourceModel\",\r\n\t\"sap/ui/Device\"\r\n], function (UIComponent, JSONModel, ResourceModel, Device) {\r\n\t\"use strict\";\r\n\r\n\treturn UIComponent.extend(\"it.designfuture.swissknife.Component\", {\r\n\r\n\t\tmetadata : {\r\n\t\t\tlibrary : \"it.designfuture.swissknife\",\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t     * Function that initilize device model with all the device informations\r\n\t     *\r\n\t     * @private\r\n\t     */\r\n\t\t__initDevice: function() {\r\n\t\t\t// set device model\r\n\t        var deviceModel = new JSONModel(Device);\r\n\t        deviceModel.setDefaultBindingMode(\"OneWay\");\r\n\t        this.setModel(deviceModel, \"device\");\r\n\t\t},\r\n\r\n\t\t/**\r\n\t     * Default init function\r\n\t     * @private\r\n\t     */ \r\n\t\tinit: function () {\r\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\r\n\r\n\t\t\tthis.beforeInit();\r\n\t\t\t\r\n\t\t\tthis.__initDevice();\r\n\t\t\t\r\n\t\t\tthis.afterInit();\r\n\r\n\t\t\t// create the views based on the url/hash\r\n\t\t\tthis.getRouter().initialize();\r\n\t\t\t\r\n\t\t\tthis.afterRouting();\r\n\t\t},\r\n\t\t\r\n\t\t/////////////////////////////////////////////////////////\r\n\t\t//\r\n\t\t// METHODS TO OVERRIDE\r\n\t\t//\r\n\t\t/////////////////////////////////////////////////////////\r\n\r\n\t\t/**\r\n\t     * Function that will be called after UIComponent init but before internal initialization (device and bundle)\r\n\t     * @public\r\n\t     */\r\n\t\tbeforeInit: function() {\r\n\t\t\t//OVERRIDE IF NEEDED\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t     * Function that will be before after router initialization\r\n\t     * @public\r\n\t     */\r\n\t\tafterInit: function() {\r\n\t\t\t//OVERRIDE IF NEEDED\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t     * Function that will be called after router initialization\r\n\t     * @public\r\n\t     */\r\n\t\tafterRouting: function() {\r\n\t\t\t//OVERRIDE IF NEEDED\r\n\t\t}\r\n\r\n\t\t\r\n\t});\r\n\r\n});",
		"it/designfuture/swissknife/Controller.js": "sap.ui.define([\r\n    \"sap/ui/core/mvc/Controller\",\r\n    \"sap/ui/core/routing/History\",\r\n    \"sap/m/MessageBox\",\r\n    \"sap/m/MessageToast\"\r\n], function (Controller, History, MessageBox, MessageToast) {\r\n\t\"use strict\";\r\n\t\r\n\treturn Controller.extend(\"it.designfuture.swissknife.Controller\", {\r\n\t\t\r\n\t\t////////////////////////////////////////////////////////////\r\n\t\t//\tATTRIBUTES\r\n\t\t////////////////////////////////////////////////////////////\r\n\r\n        __targetName: null,\r\n        __dialogs: {},\r\n        __homeRoute: \"\",\r\n        __homeRouteParams: {},\r\n        \r\n        DEFAULT_DIALOG_ID: \"___DEFAULT_DIALOG_ID___\",\r\n\t\t\r\n\t\t////////////////////////////////////////////////////////////\r\n\t\t//\tLIFECYCLE\r\n\t\t////////////////////////////////////////////////////////////\r\n\t\t\r\n\t\tonInit: function() {\r\n\t        this.__dialogs = {};\r\n\t\t\tif( this.__targetName !== undefined && this.__targetName !== null ) {\r\n\t\t\t\tvar targets = typeof this.__targetName === 'string' ? [this.__targetName] : this.__targetName;\r\n\t\t\t\tfor( var i = 0; i < targets.length; i++ ) {\r\n\t\t\t\t\tthis.getRouter().getRoute(targets[i]).attachPatternMatched(this.__onRouteMatched, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t////////////////////////////////////////////////////////////\r\n\t\t//\tMETHODS\r\n\t\t////////////////////////////////////////////////////////////\r\n        \r\n        /**\r\n\t\t * Return the app router\r\n\t\t * @public\r\n\t\t * @returns {object} The app Router\r\n\t\t */\r\n\t\tgetRouter: function() {\r\n\t\t\treturn sap.ui.core.UIComponent.getRouterFor(this);\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to implement the router nav back\r\n\t\t * @public\r\n\t\t */\r\n\t\tonNavBack: function(oEvent) {\r\n\t\t\tvar oHistory = History.getInstance();\r\n\t\t\tvar sPreviousHash = oHistory.getPreviousHash();\r\n\t\r\n\t\t\t// The history contains a previous entry\r\n\t\t\tif (sPreviousHash !== undefined) {\r\n\t\t\t\twindow.history.go(-1);\r\n\t\t\t} else {\r\n\t\t\t\tfor( var [name, route] of Object.entries(this.getRouter()._oRoutes) ) {\r\n\t\t\t\t\tvar toCompare = (this.__homeRoute === undefined || this.__homeRoute === null || this.__homeRoute === \"\") ? route._oConfig.pattern : route._oConfig.name;\r\n\t\t\t\t\tif( toCompare === this.__homeRoute ) {\r\n\t\t\t\t\t\tthis.navTo(route._oConfig.name, this.__homeRouteParams, true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to implement the router nav to\r\n\t\t * @public\r\n\t\t */\r\n\t\tnavTo: function(sRoute, mData, bReplace) {\r\n\t\t\tthis.getRouter().navTo(sRoute, mData, bReplace);\r\n\t\t},\r\n\t\t\r\n\t\t__onRouteMatched: function(oEvent) {\r\n\t\t\tvar args = oEvent.getParameters().arguments;\r\n\t\t\tvar argsValues = [oEvent, oEvent.getParameters().name];\r\n\t\t\tfor ( var key in args) {\r\n\t\t\t\tif (args.hasOwnProperty(key)) {\r\n\t\t\t\t\tvar obj = args[key];\r\n\t\t\t\t\targsValues.push(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.onRouteMatched.apply(this, argsValues);\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * This method must be implemented by each Controller that want to match a routing path\r\n\t\t * @public\r\n\t\t */\r\n\t\tonRouteMatched: function(oEvent, routeName) {\r\n\t\t\t// OVERRIDE ON SUBCLASS\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Get the Component\r\n\t\t * @public\r\n\t\t * @returns {object} The Component\r\n\t\t */\r\n\t\tgetComponent: function() {\r\n\t\t\treturn this.getOwnerComponent();\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to get the model path from an event\r\n\t\t * @public\r\n\t\t * @param {object} oEvent UI5 event\r\n\t\t * @param {string} modelName Model name\r\n\t\t * @returns {string} The binding path\r\n\t\t */\r\n\t\tgetPathFromEvent: function(oEvent, modelName) {\r\n\t\t\tvar context = oEvent.getSource().getBindingContext(modelName);\r\n\t\t\tvar sPath = context.getPath().substr(1);\r\n\t\t\treturn sPath;\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to set a View model\r\n\t\t * @public\r\n\t\t * @param {object} model JSON/OData Model\r\n\t\t * @param {string} modelName Model name\r\n\t\t */\r\n\t\tsetViewModel: function(model, modelName) {\r\n\t\t\tvar view = this.getView();\r\n\t\t\tif( modelName === null || modelName === undefined ) {\r\n\t\t\t    view.setModel(model);\r\n\t\t\t} else {\r\n\t\t\t    view.setModel(model, modelName);\r\n\t\t\t}\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to get a View model\r\n\t\t * @public\r\n\t\t * @param {string} modelName Model name\r\n         * @returns The model\r\n\t\t */\r\n\t\tgetViewModel: function(modelName) {\r\n\t\t\tvar view = this.getView();\r\n\t\t\tvar model = modelName === null || modelName === undefined  ? view.getModel() : view.getModel(modelName);\r\n\t\t\treturn model;\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to get a View model property\r\n\t\t * @public\r\n\t\t * @param {object} model JSON/OData Model\r\n\t\t * @param {string} modelName Model name\r\n         * @returns The model property\r\n\t\t */\r\n\t\tgetViewModelProperty: function(modelName, propertyName) {\r\n\t\t\treturn this.getViewModel(modelName).getProperty(propertyName);\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to set a View model property\r\n\t\t * @public\r\n\t\t * @param {object} model JSON/OData Model\r\n\t\t * @param {string} modelName Model name\r\n\t\t * @param {string} value Property value\r\n\t\t */\r\n\t\tsetViewModelProperty: function(modelName, propertyName, value) {\r\n\t\t\treturn this.getViewModel(modelName).setProperty(propertyName, value);\r\n\t\t},\r\n\t\t\r\n        /**\r\n\t\t * Utility to get a View model from an Event\r\n\t\t * @public\r\n\t\t * @param {object} oEvent UI5 Event\r\n\t\t * @param {string} modelName Model name\r\n\t\t * @returns {string} JSON/OData Model\r\n\t\t */\r\n\t\tgetViewModelFromEvent: function(oEvent, modelName) {\r\n\t\t\tvar view = this.getView();\r\n\t\t\tvar model = modelName === null || modelName === undefined  ? view.getModel() : view.getModel(modelName);\r\n\t\t\treturn model.getProperty(oEvent.getSource().getBindingContext().getPath());\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to set a Component model\r\n\t\t * @public\r\n\t\t * @param {object} model JSON/OData Model\r\n\t\t * @param {string} modelName Model name\r\n\t\t */\r\n\t\tsetComponentModel: function(model, modelName) {\r\n\t\t\tvar component = this.getOwnerComponent();\r\n\t\t\tif( modelName === null || modelName === undefined  ) {\r\n\t\t\t    component.setModel(model);\r\n\t\t\t} else {\r\n\t\t\t    component.setModel(model, modelName);\r\n\t\t\t}\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to get a Component model\r\n\t\t * @public\r\n\t\t * @param {string} modelName Model name\r\n         * @returns The model\r\n\t\t */\r\n\t\tgetComponentModel: function(modelName) {\r\n\t\t\tvar component = this.getOwnerComponent();\r\n\t\t\tvar model = modelName === null || modelName === undefined  ? component.getModel() : component.getModel(modelName);\r\n\t\t\treturn model;\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to get a Component model property\r\n\t\t * @public\r\n\t\t * @param {object} model JSON/OData Model\r\n\t\t * @param {string} modelName Model name\r\n         * @returns The model property\r\n\t\t */\r\n\t\tgetComponentModelProperty: function(modelName, propertyName) {\r\n\t\t\treturn this.getComponentModel(modelName).getProperty(propertyName);\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to set a Component model property\r\n\t\t * @public\r\n\t\t * @param {object} model JSON/OData Model\r\n\t\t * @param {string} modelName Model name\r\n\t\t * @param {string} value Property value\r\n\t\t */\r\n\t\tsetComponentModelProperty: function(modelName, propertyName, value) {\r\n\t\t\treturn this.getComponentModel(modelName).setProperty(propertyName, value);\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to get a Component model from an Event\r\n\t\t * @public\r\n\t\t * @param {object} oEvent UI5 Event\r\n\t\t * @param {string} modelName Model name\r\n\t\t * @returns {string} JSON/OData Model\r\n\t\t */\r\n\t\tgetComponentModelFromEvent: function(oEvent, modelName) {\r\n\t\t\tvar component = this.getOwnerComponent();\r\n\t\t\tvar model = modelName === null || modelName === undefined ? component.getModel() : component.getModel(modelName);\r\n\t\t\treturn model.getProperty(oEvent.getSource().getBindingContextPath());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Getter for the resource bundle.\r\n\t\t * @public\r\n\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\r\n\t\t */\r\n\t\tgetResourceBundle: function () {\r\n\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the translation for sKey\r\n\t\t * @public\r\n\t\t * @param {string} sKey the translation key\r\n\t\t * @param {array} aParameters translation paramets (can be null)\r\n\t\t * @returns {string} The translation of sKey\r\n\t\t */\r\n\t\tgetTranslation: function (sKey, aParameters) {\r\n\t\t\tif( aParameters === undefined || aParameters === null ) {\r\n\t\t\t\treturn this.getResourceBundle().getText(sKey)\r\n\t\t\t} else {\r\n\t\t\t\treturn this.getResourceBundle().getText(sKey, aParameters)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\t/*******************************************************\r\n\t\t * MESSAGE BOX FROM BUS\r\n\t\t *******************************************************/\r\n\t\t/**\r\n\t\t * Utility to create a MessageBox\r\n\t\t * @public\r\n\t\t * @param {string} icon MessageBox icon\r\n\t\t * @param {string} title MessageBox title\r\n\t\t * @param {array} MessageBox actions\r\n\t\t * @param {object} onCloseCallback MessageBox close callback\r\n\t\t */\r\n\t\tshowMessageBox: function(icon, title, message, actions, onCloseCallback) {\r\n\t\t\tvar bCompact = !!this.getView().$().closest(\".sapUiSizeCompact\").length;\r\n\t\t\tMessageBox.show( message, {\r\n\t\t\t\ticon: icon,\r\n\t\t\t\ttitle: title,\r\n\t\t\t\tactions: actions,\r\n\t\t\t\tstyleClass: bCompact? \"sapUiSizeCompact\" : \"\",\r\n\t\t\t\tonClose: onCloseCallback\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t////////////////////////////////////////////////////////\r\n\t\t//\tEVENT BUS\r\n\t\t////////////////////////////////////////////////////////\r\n        \r\n        /**\r\n\t\t * Utility to send a bus event\r\n\t\t * @public\r\n\t\t * @param {string} channel Event channel\r\n\t\t * @param {string} event Event name\r\n\t\t * @param {object} data Event data\r\n\t\t */\r\n\t\tsendEvent: function(channel, event, data) {\r\n\t\t\tsap.ui.getCore().getEventBus().publish(channel, event, data);\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to subscribe to a channel and event\r\n\t\t * @public\r\n\t\t * @param {string} channel Event channel\r\n\t\t * @param {string} event Event name\r\n\t\t * @param {object} handler Event handler\r\n\t\t * @param {object} listener Event listener\r\n\t\t */\r\n\t\tsubscribe: function(channel, event, handler, listener) {\r\n\t\t\tsap.ui.getCore().getEventBus().subscribe(channel, event, handler, listener);\r\n\t\t},\r\n        \r\n        /**\r\n\t\t * Utility to unsubscribe to a channel and event\r\n\t\t * @public\r\n\t\t * @param {string} channel Event channel\r\n\t\t * @param {string} event Event name\r\n\t\t * @param {object} handler Event handler\r\n\t\t * @param {object} listener Event listener\r\n\t\t */\r\n\t\tunSubscribe: function(channel, event, handler, listener) {\r\n\t\t\tsap.ui.getCore().getEventBus().unsubscribe(channel, event, handler, listener);\r\n\t\t},\r\n\r\n\t\t////////////////////////////////////////////////////////\r\n\t\t//\tTOAST\r\n\t\t////////////////////////////////////////////////////////\r\n        \r\n        /**\r\n\t\t * Utility to create a toast\r\n\t\t * @public\r\n\t\t * @param {string} channel Toast message\r\n\t\t * @param {boolean} event Is this a sticky message\r\n\t\t */\r\n\t\tshowToast: function(message, sticky) {\r\n\t\t\tMessageToast.show(message, {\r\n\t\t\t    closeOnBrowserNavigation: !sticky ? false : true\r\n\t\t\t});\r\n\t\t},\t\t\r\n\t\t\r\n\t\t////////////////////////////////////////////////////////////\r\n\t\t//\tDIALOG\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        /**\r\n\t\t * Return a created dialog\r\n\t\t * @public\r\n\t\t * @param {string} dialogId Dialog ID\r\n         * @returns The dialog associated to the id\r\n\t\t */\r\n        getDialog: function(dialogId) {\r\n            return this.__dialogs[dialogId];\r\n        },\r\n        \r\n        /**\r\n\t\t * Create a dialog\r\n\t\t * @public\r\n\t\t * @param {string} dialogId Dialog ID\r\n\t\t * @param {string} dialogPath Path to the XML dialog file\r\n         * @returns The created dialog\r\n\t\t */\r\n\t\tcreateDialog: function (dialogId, dialogPath) {\r\n\t\t\tif( dialogId === undefined || dialogId === null || dialogId === \"\" ) {\r\n\t\t\t\tdialogId = this.DEFAULT_DIALOG_ID;\r\n\t\t\t}\r\n\t\t\t\r\n            var dialog = this.__dialogs[dialogId];\r\n\t\t\tif (!dialog) {\r\n\t\t\t\tdialog = sap.ui.xmlfragment(this.getView().getId(), dialogPath, this);\r\n\t\t\t\tthis.getView().addDependent(dialog);\r\n\t\t\t\tthis.__dialogs[dialogId] = dialog;\r\n\t\t\t}\r\n\t\t\treturn dialog;\r\n\t\t},\r\n\t\t\r\n        /**\r\n\t\t * Destroy a dialog\r\n\t\t * @public\r\n\t\t * @param {string} dialogId Dialog ID\r\n\t\t */\r\n\t\tdestroyDialog: function(dialogId) {\r\n\t\t\tif( dialogId === undefined || dialogId === null || dialogId === \"\" ) {\r\n\t\t\t\tdialogId = this.DEFAULT_DIALOG_ID;\r\n\t\t\t}\r\n\t\t\t\r\n            var dialog = this.__dialogs[dialogId];\r\n\t\t\tif (dialog) {\r\n\t\t\t\tif( dialog.close ) {\r\n\t\t\t\t\tdialog.close();\r\n\t\t\t\t}\r\n\t\t\t\tdialog.destroy();\r\n\t\t\t\tthis.__dialogs[dialogId] = null;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t////////////////////////////////////////////////////////////\r\n\t\t//\tPOPOVER\r\n\t\t////////////////////////////////////////////////////////////\r\n        \r\n        /**\r\n\t\t * Create a Popover\r\n\t\t * @public\r\n\t\t * @param {string} dialogId Dialog ID\r\n\t\t * @param {string} popoverPath Path to the Popover XML path\r\n\t\t * @param {object} openByElement Element to bind the popover to\r\n         * @returns The created Popover\r\n\t\t */\r\n\t\tcreatePopover: function (popoverId, popoverPath, openByElement) {\r\n\t\t\tvar popover = this.createDialog(popoverId, popoverPath);\r\n\t\t\t\r\n\t\t\t// delay because addDependent will do a async rerendering and the popover will immediately close without it\r\n\t\t\tif( openByElement ) {\r\n\t\t\t\tjQuery.sap.delayedCall(0, this, function () {\r\n\t\t\t    \tpopover.openBy(openByElement);\r\n\t\t\t    });\r\n\t\t\t}\r\n\t\t\treturn popover;\r\n\t\t},\r\n\t\t\r\n        /**\r\n\t\t * Destroy a popover\r\n\t\t * @public\r\n\t\t * @param {string} popoverId Popover ID\r\n\t\t */\r\n\t\tdestroyPopover: function(popoverId) {\r\n\t\t\tthis.destroyDialog(popoverId);\r\n\t\t}\r\n\t\t\r\n\t});\r\n});",
		"it/designfuture/swissknife/library.js": "/*!\r\n * ${copyright}\r\n */\r\n\r\n/**\r\n * Initialization Code and shared classes of library it.designfuture.swissknife.\r\n */\r\nsap.ui.define([\r\n\t'jquery.sap.global', \r\n\t'sap/ui/core/library' // library dependency\r\n\t],  function(jQuery, library) {\r\n\r\n\t\t\"use strict\";\r\n\r\n\t\t/**\r\n\t\t * Suite controls library.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @name it.designfuture.swissknife\r\n\t\t * @author Emanuele Ricci <stermi@gmail.com>\r\n\t\t * @version ${version}\r\n\t\t * @public\r\n\t\t */\r\n\r\n\r\n\t\t// delegate further initialization of this library to the Core\r\n\t\tsap.ui.getCore().initLibrary({\r\n\t\t\tname : \"it.designfuture.swissknife\",\r\n\t\t\tversion: \"${version}\",\r\n\t\t\tnoLibraryCSS: true,\r\n\t\t\tdependencies : [\"sap.ui.core\", \"sap.m\"],\r\n\t\t\ttypes: [],\r\n\t\t\tinterfaces: [],\r\n\t\t\tcontrols: [ \r\n\t\t\t\t\"it.designfuture.swissknife.Controller\",\r\n\t\t\t\t\"it.designfuture.swissknife.Component\",\r\n\t\t\t],\r\n\t\t\telements: []\r\n\t\t});\r\n\r\n\t\treturn it.designfuture.swissknife;\r\n\r\n}, /* bExport= */ false);"
	}
}