jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "it.designfuture.multiinputdialog.library-preload",
	"modules": {
		"it/designfuture/multiinputdialog/library.js": "/*!\n * ${copyright}\n */\n\n/**\n * Initialization Code and shared classes of library it.designfuture.multiinputdialog.\n */\nsap.ui.define([\n\t'jquery.sap.global', \n\t'sap/ui/core/library' // library dependency\n\t],  function(jQuery, library) {\n\n\t\t\"use strict\";\n\n\t\t/**\n\t\t * Suite controls library.\n\t\t *\n\t\t * @namespace\n\t\t * @name it.designfuture.multiinputdialog\n\t\t * @author Emanuele Ricci <stermi@gmail.com>\n\t\t * @version ${version}\n\t\t * @public\n\t\t */\n\t\t\n\t\t// delegate further initialization of this library to the Core\n\t\tsap.ui.getCore().initLibrary({\n\t\t\tname : \"it.designfuture.multiinputdialog\",\n\t\t\tnoLibraryCSS: true,\n\t\t\tversion: \"${version}\",\n\t\t\tdependencies : [\"sap.ui.core\", \"sap.m\"],\n\t\t\ttypes: [],\n\t\t\tinterfaces: [],\n\t\t\tcontrols: [ \n\t\t\t\t\"it.designfuture.multiinputdialog.MultiInputDialog\"\n\t\t\t],\n\t\t\telements: []\n\t\t});\n\n\t/**\n\t * Different mode to filter the Select Dialog\n\t *\n\t * @enum {string}\n\t * @public\n\t * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel\n\t */\n\tit.designfuture.multiinputdialog.SelectDialogMode = {\n\n\t\t/**\n\t\t * Default mode. Items already selected in the multi input will be pre-checked in the Select Dialog\n\t\t * @public\n\t\t */\n\t\tCheckSelected : \"CheckSelected\",\n\n\t\t/**\n\t\t * Items already selected in the multi input will be hided in the Select Dialog\n\t\t * @public\n\t\t */\n\t\tHideSelected : \"HideSelected\",\n\n\t};\n\n\t\treturn it.designfuture.multiinputdialog;\n\n}, /* bExport= */ false);",
		"it/designfuture/multiinputdialog/MultiInputDialog.js": "// Provides control it.designfuture.multiinputdialog.MultiInputDialog\r\nsap.ui.define([\r\n\t\"sap/ui/core/Control\",\r\n\t\"sap/m/MultiInput\",\r\n\t\"sap/m/Tokenizer\",\r\n\t\"sap/m/Token\",\r\n\t\"sap/m/SelectDialog\",\r\n\t\"sap/ui/model/Filter\",\r\n\t\"sap/ui/model/FilterOperator\"\r\n], function (Control, MultiInput, Tokenizer, Token, SelectDialog, Filter, FilterOperator) {\r\n\t\"use strict\";\r\n\t\r\n\t/**\r\n\t * Constructor for a new MultiInputDialog.\r\n\t *\r\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \r\n\t * @param {object} [mSettings] initial settings for the new control\r\n\t *\r\n\t * @class\r\n\t * MultiInputDialog Control to render a QR Code\r\n\t * @extends sap.m.MultiInput\r\n\t * @version ${version}\r\n\t *\r\n\t * @constructor\r\n\t * @public\r\n\t * @since 1.40\r\n\t * @name it.designfuture.multiinputdialog.MultiInputDialog\r\n\t */\r\n\tvar MultiInputDialog =  MultiInput.extend(\"it.designfuture.multiinputdialog.MultiInputDialog\", {\r\n\r\n\t\t__valueHelpCurrentFilter: [],\r\n\t\t\r\n\t\tmetadata : {\r\n\t\t\tlibrary: 'it.designfuture.multiinputdialog',\r\n\t\t\tproperties: {\r\n\r\n\t\t\t\t//CUSTOM\r\n\t\t\t\t/**\r\n\t\t\t\t * List of keys used to filter the select dialog\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogFilterKeys : {type : \"string[]\", group : \"Appearance\", defaultValue : null},\r\n\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Select dialog mode to handle values already selected in the MultiInput\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogMode : {type : \"it.designfuture.multiinputdialog.SelectDialogMode\", group : \"Appearance\", defaultValue : it.designfuture.multiinputdialog.SelectDialogMode.CheckSelected},\r\n\r\n\t\t\t\t//SELECT DIALOG\r\n\t\t\t\t/**\r\n\t\t\t\t * Determines the title text that appears in the dialog header\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogTitle : {type : \"string\", group : \"Appearance\", defaultValue : null},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Determines the text shown when the list has no data\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogNoDataText : {type : \"string\", group : \"Appearance\", defaultValue : null},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Determines if the user can select several options from the list\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogMultiSelect : {type : \"boolean\", group : \"Dimension\", defaultValue : false},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Determines the number of items initially displayed in the list. Also defines the number of items to be requested from the model for each grow.\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogGrowingThreshold : {type : \"int\", group : \"Misc\", defaultValue : null},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Determines the content width of the inner dialog. For more information, see the dialog documentation.\r\n\t\t\t\t * @since 1.18\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogContentWidth : {type : \"sap.ui.core.CSSSize\", group : \"Dimension\", defaultValue : null},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to \"true\".\r\n\t\t\t\t * @since 1.18\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogRememberSelections : {type : \"boolean\", group : \"Behavior\", defaultValue : false},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Determines the content height of the inner dialog. For more information, see the dialog documentation.\r\n\t\t\t\t */\r\n\t\t\t\tselectDialogContentHeight : {type : \"sap.ui.core.CSSSize\", group : \"Dimension\", defaultValue : null}\r\n\t\t\t},\r\n\t\t\taggregations: {\r\n\t\t\t\t__selectDialog : {type : \"sap.m.SelectDialog\", multiple: false, visibility : \"hidden\"},\r\n\t\t\t\tselectDialogItems : {type : \"sap.ui.core.Item\", multiple : true, singularName : \"selectDialogItem\"}\r\n\t\t\t},\r\n\t\t\tevents: {},\r\n\t\t\trenderer: null\r\n\t\t},\r\n\t\t\r\n\t\tinit: function() {\r\n\t\t\tMultiInput.prototype.init.call(this);\r\n\r\n\t\t\tthis.__valueHelpCurrentFilter = [];\r\n\r\n\t\t\tthis.attachValueHelpRequest(this.__onValueHelpRequest, this);\r\n\t\t\tthis.attachSuggest(this.__onSuggest, this);\r\n\r\n\t\t\tthis.setAggregation(\"__selectDialog\", new SelectDialog({\r\n\t\t\t\t// PROPERTIES\r\n\t\t\t\ttitle: this.getSelectDialogTitle(),\r\n\t\t\t\tnoDataText: this.getSelectDialogNoDataText(),\r\n\t\t\t\tmultiSelect: this.getSelectDialogMultiSelect(),\r\n\t\t\t\tgrowingThreshold: this.getSelectDialogGrowingThreshold(),\r\n\t\t\t\tcontentWidth: this.getSelectDialogContentWidth(),\r\n\t\t\t\trememberSelections: this.getSelectDialogRememberSelections(),\r\n\t\t\t\tcontentHeight: this.getSelectDialogContentHeight(),\r\n\r\n\t\t\t\t// EVENTS\r\n\t\t\t\tsearch: this.__onValueHelpSearch.bind(this),\r\n\t\t\t\tconfirm: this.__onValueHelpConfirm.bind(this)\r\n\r\n\t\t\t}));\r\n\t\t},\r\n\r\n\t\t//////////////////////////////////////////////\r\n\t\t// PRIVATE METHODS\r\n\t\t//////////////////////////////////////////////\r\n\r\n\r\n\t\t__getSourceValueFromValueHelp: function(selectedItem, sourceInfo) {\r\n\t\t\tvar rV = null;\r\n\t\t\tif( sourceInfo.parts.length > 1 ) {\r\n\t\t\t\tvar collectedValues = [];\r\n\t\t\t\tfor( var k in sourceInfo.parts ) {\r\n\t\t\t\t\tvar part = sourceInfo.parts[k];\r\n\t\t\t\t\tcollectedValues.push( selectedItem.getBindingContext(part.model).getObject()[part.path] );\r\n\t\t\t\t}\r\n\t\t\t\trV = sourceInfo.formatter.apply(this, collectedValues);\r\n\t\t\t} else {\r\n\t\t\t\tvar firstPart = sourceInfo.parts[0];\r\n\t\t\t\trV = selectedItem.getBindingContext(firstPart.model).getObject()[firstPart.path];\r\n\t\t\t}\r\n\t\t\treturn rV;\r\n\t\t},\r\n\r\n\t\t__selectDialgoOnDataReceived: function(oEvent) {\r\n\t\t\tvar aTokens = this.getTokens();\r\n\t\t\tvar aItems = this.getAggregation(\"__selectDialog\").getItems();\r\n\t\t\tfor (var j in aItems){\r\n\t\t\t\tfor( var k in aTokens ) {\r\n\t\t\t\t\tif( aItems[j].getTitle() === aTokens[k].getKey() || aItems[j].getDescription() === aTokens[k].getKey() || aItems[j].getTitle() === aTokens[k].getText() || aItems[j].getDescription() === aTokens[k].getText() ) {\r\n\t\t\t\t\t\taItems[j].setSelected(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t__onValueHelpConfirm: function(oEvent) {\r\n\t\t\t//should add token to the multi input\r\n\t\t\tvar tokens = this.getTokens();\r\n\t\t\tvar mode = this.getSelectDialogMode();\r\n\t\t\tvar selectedItems = oEvent.getParameter(\"selectedItems\");\r\n\t\t\tvar sourceItemTemplate = this.getBindingInfo(\"suggestionItems\").template;\r\n\t\t\tvar aAddedTokens = [];\r\n\t\t\tvar aRemovedTokens = [];\r\n\r\n\t\t\t//\tCheck if current tokens are in the selected ones otherwise delete those tokens\r\n\t\t\tif ( mode === it.designfuture.multiinputdialog.SelectDialogMode.CheckSelected ) {\r\n\t\t\t\tvar tokenExist = false;\r\n\t\t\t\tfor( var tk in tokens ) {\r\n\t\t\t\t\ttokenExist = false;\r\n\t\t\t\t\tvar token = tokens[tk];\r\n\t\t\t\t\tfor( var ik in selectedItems ) {\r\n\t\t\t\t\t\tvar selectedItem = selectedItems[ik];\r\n\t\t\t\t\t\tvar keyValue = this.__getSourceValueFromValueHelp(selectedItem, sourceItemTemplate.getBindingInfo(\"key\"));\r\n\t\t\t\t\t\ttokenExist = keyValue === token.getKey();\r\n\t\t\t\t\t\tif( tokenExist )\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( !tokenExist ) {\r\n\t\t\t\t\t\taRemovedTokens.push(token);\r\n\t\t\t\t\t\tthis.removeToken(token);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor( var k in selectedItems ) {\r\n\t\t\t\tvar selectedItem = selectedItems[k];\r\n\r\n\t\t\t\tvar keyValue = this.__getSourceValueFromValueHelp(selectedItem, sourceItemTemplate.getBindingInfo(\"key\"));\r\n\t\t\t\tvar textValue = this.__getSourceValueFromValueHelp(selectedItem, sourceItemTemplate.getBindingInfo(\"text\"));\r\n\t\t\t\tvar newToken = new Token({\r\n\t\t\t\t\tkey: keyValue,\r\n\t\t\t\t\ttext: textValue\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//we should always check if this token is not already in the token list\r\n\t\t\t\tif( !this.existToken(newToken) ) {\r\n\t\t\t\t\taAddedTokens.push(newToken);\r\n\t\t\t\t\tthis.addToken(newToken);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif( aAddedTokens.length > 0 ) {\r\n\t\t\t\tthis.fireTokenUpdate({\r\n\t\t\t\t\taddedTokens: aAddedTokens,\r\n\t\t\t\t\tremovedTokens: [],\r\n\t\t\t\t\ttype: Tokenizer.TokenUpdateType.Added\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif( aRemovedTokens.length > 0 ) {\r\n\t\t\t\tthis.fireTokenUpdate({\r\n\t\t\t\t\taddedTokens: [],\r\n\t\t\t\t\tremovedTokens: aRemovedTokens,\r\n\t\t\t\t\ttype: Tokenizer.TokenUpdateType.Removed\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t__onSuggestionItemSelected: function(oEvent) {\r\n\t\t\toEvent.getSource().getBinding(\"suggestionItems\").filter([]);\r\n\t\t},\r\n\r\n\t\t__onSuggest: function(oEvent) {\r\n\t\t\tvar sQuery = oEvent.getParameter(\"suggestValue\");\r\n\t\t\tvar oBinding = oEvent.getSource().getBinding(\"suggestionItems\");\r\n\r\n\t\t\t//Reset filters it has retained\r\n\t\t\toBinding.aFilters = [];\r\n\r\n\t\t\tvar aFilters = [];\r\n\t\t\tif (sQuery) {\r\n\t\t\t\taFilters = new Filter(this.addSearchFilter(sQuery), false);\r\n\t\t\t}\r\n\r\n\t\t\tvar tokenFilters = this.addTokenToFilter();\r\n\t\t\tvar aFilters = tokenFilters.concat(aFilters);\r\n\r\n\t\t\toBinding.filter(aFilters.length > 0 ? new Filter(aFilters, true) : aFilters);\r\n\t\t},\r\n\r\n\t\t__onValueHelpRequest: function(oEvent) {\r\n\t\t\tvar mode = this.getSelectDialogMode();\r\n\t\t\tvar selectDialog = this.getAggregation(\"__selectDialog\");\r\n\r\n\t\t\tif( mode === it.designfuture.multiinputdialog.SelectDialogMode.HideSelected ) {\r\n\t\t\t\tvar filters = this.addTokenToFilter();\r\n\t\t\t\tthis.__valueHelpCurrentFilter = filters.length > 0 ? new Filter(filters, true) : filters;\r\n\t\t\t\tselectDialog.getBinding(\"items\").filter(this.__valueHelpCurrentFilter);\r\n\t\t\t} else if ( mode === it.designfuture.multiinputdialog.SelectDialogMode.CheckSelected ) {\r\n\t\t\t\tthis.getAggregation(\"__selectDialog\").getBinding(\"items\").attachDataReceived(this.__selectDialgoOnDataReceived, this);\r\n\t\t\t\tthis.__selectDialgoOnDataReceived();\r\n\t\t\t}\r\n\t\t\tselectDialog.open();\r\n\t\t},\r\n\r\n\t\t__onValueHelpSearch: function(oEvent) {\r\n\t\t\tvar aInternalFilters = [];\r\n\t\t\tvar sSearchValue = oEvent.getParameter(\"value\");\r\n\r\n\t\t\taInternalFilters = this.addSearchFilter(sSearchValue);\r\n\r\n\t\t\tvar aFilters = aInternalFilters.length > 0 ? new Filter([new Filter(aInternalFilters, false)].concat(this.__valueHelpCurrentFilter), true) : this.__valueHelpCurrentFilter;\r\n\r\n\t\t\toEvent.getSource().getBinding(\"items\").filter( aFilters );\r\n\t\t},\r\n\r\n\t\t//////////////////////////////////////////////\r\n\t\t// METHODS\r\n\t\t//////////////////////////////////////////////\r\n\r\n\t\taddSearchFilter: function(sSearchValue) {\r\n\t\t\tvar aInternalFilters = [];\r\n\t\t\tvar aFilterKeys = this.getSelectDialogFilterKeys();\r\n\t\t\t\r\n\t\t\tif( sSearchValue !== undefined && sSearchValue !== null && sSearchValue.length > 0 ) {\r\n\t\t\t\tfor( var k in aFilterKeys ) {\r\n\t\t\t\t\taInternalFilters.push(new Filter(\r\n\t\t\t\t\t\taFilterKeys[k],\r\n\t\t\t\t\t\tFilterOperator.Contains,\r\n\t\t\t\t\t\tsSearchValue\r\n\t\t\t\t\t));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\treturn aInternalFilters;\r\n\t\t},\r\n\r\n\t\taddTokenToFilter: function() {\r\n\t\t\tvar aTokens = this.getTokens();\r\n\t\t\tvar sourceItemTemplate = this.getBindingInfo(\"suggestionItems\").template;\r\n\t\t\tvar keyPath = sourceItemTemplate.getBindingInfo(\"key\").parts[0].path;\r\n\t\t\tvar aFilters = [];\r\n\r\n\t\t\tfor( var k in aTokens ) {\r\n\t\t\t\tvar token = aTokens[k];\r\n\t\t\t\taFilters.push(\r\n\t\t\t\t\tnew Filter(keyPath, FilterOperator.NE, token.getKey())\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn aFilters;\r\n\t\t},\r\n\r\n\t\t//////////////////////////////////////////////\r\n\t\t// GETTER / SETTER\r\n\t\t//////////////////////////////////////////////\r\n\r\n\t\tsetSelectDialogTitle: function(value) {\r\n\t\t\tthis.getAggregation(\"__selectDialog\").setTitle(value);\r\n\t\t\tthis.setProperty(\"selectDialogTitle\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tsetSelectDialogNoDataText: function(value) {\r\n\t\t\tthis.getAggregation(\"__selectDialog\").setNoDataText(value);\r\n\t\t\tthis.setProperty(\"selectDialogNoDataText\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tsetSelectDialogMultiSelect: function(value) {\r\n\t\t\tthis.getAggregation(\"__selectDialog\").setMultiSelect(value);\r\n\t\t\tthis.setProperty(\"selectDialogMultiSelect\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tsetSelectDialogGrowingThreshold: function(value) {\r\n\t\t\tthis.getAggregation(\"__selectDialog\").setGrowingThreshold(value);\r\n\t\t\tthis.setProperty(\"selectDialogGrowingThreshold\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tsetSelectDialogContentWidth: function(value) {\r\n\t\t\tthis.getAggregation(\"__selectDialog\").setContentWidth(value);\r\n\t\t\tthis.setProperty(\"selectDialogContentWidth\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tsetSelectDialogRememberSelections: function(value) {\r\n\t\t\tthis.getAggregation(\"__selectDialog\").setRememberSelections(value);\r\n\t\t\tthis.setProperty(\"selectDialogRememberSelections\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tsetSelectDialogContentHeight: function(value) {\r\n\t\t\tthis.getAggregation(\"__selectDialog\").setContentHeight(value);\r\n\t\t\tthis.setProperty(\"selectDialogContentHeight\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t});\r\n\t\r\n\tMultiInputDialog.prototype.existToken = function (oCompareToken) {\r\n\t\tvar exist = false;\r\n\t\tvar aTokens = this.getTokens();\r\n\t\tvar oToken = null;\r\n\t\tfor( var k in aTokens ) {\r\n\t\t\toToken = aTokens[k];\r\n\t\t\texist = oToken.getKey() === oCompareToken.getKey() && oToken.getText() === oCompareToken.getText();\r\n\t\t\tif( exist )\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn exist;\r\n\t};\r\n\r\n\t/*\r\n\t * Forwards a function call to a managed object based on the aggregation name.\r\n\t * If the name is items, it will be forwarded to the list, otherwise called locally\r\n\t * @private\r\n\t * @param {string} sFunctionName The name of the function to be called\r\n\t * @param {string} sAggregationName The name of the aggregation asociated\r\n\t * @returns {any} The return type of the called function\r\n\t */\r\n\tMultiInputDialog.prototype._callMethodInManagedObject = function (sFunctionName, sAggregationName) {\r\n\t\tvar aArgs = Array.prototype.slice.call(arguments);\r\n\r\n\t\tif (sAggregationName === \"selectDialogItems\") {\r\n\t\t\t// apply to the internal list\r\n\t\t\tvar subArgs = aArgs.slice(1);\r\n\t\t\tsubArgs[0] = \"items\";\r\n\t\t\treturn this.getAggregation(\"__selectDialog\")[sFunctionName].apply(this.getAggregation(\"__selectDialog\"), subArgs);\r\n\t\t} else {\r\n\t\t\t// apply to this control\r\n\t\t\treturn sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, aArgs.slice(1));\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Forwards aggregations with the name of items to the internal list.\r\n\t * @override\r\n\t * @protected\r\n\t * @param {string} sAggregationName The name for the binding\r\n\t * @param {object} oBindingInfo The configuration parameters for the binding\r\n\t * @returns {sap.m.MultiInputDialog} this pointer for chaining\r\n\t */\r\n\tMultiInputDialog.prototype.bindAggregation = function () {\r\n\t\tvar args = Array.prototype.slice.call(arguments);\r\n\r\n\t\t// propagate the bind aggregation function to list\r\n\t\tthis._callMethodInManagedObject.apply(this, [\"bindAggregation\"].concat(args));\r\n\t\treturn this;\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.validateAggregation = function (sAggregationName, oObject, bMultiple) {\r\n\t\treturn this._callMethodInManagedObject(\"validateAggregation\", sAggregationName, oObject, bMultiple);\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.setAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {\r\n\t\tthis._callMethodInManagedObject(\"setAggregation\", sAggregationName, oObject, bSuppressInvalidate);\r\n\t\treturn this;\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.getAggregation = function (sAggregationName, oDefaultForCreation) {\r\n\t\treturn this._callMethodInManagedObject(\"getAggregation\", sAggregationName, oDefaultForCreation);\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.indexOfAggregation = function (sAggregationName, oObject) {\r\n\t\treturn this._callMethodInManagedObject(\"indexOfAggregation\", sAggregationName, oObject);\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.insertAggregation = function (sAggregationName, oObject, iIndex, bSuppressInvalidate) {\r\n\t\tthis._callMethodInManagedObject(\"insertAggregation\", sAggregationName, oObject, iIndex, bSuppressInvalidate);\r\n\t\treturn this;\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.addAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {\r\n\t\tthis._callMethodInManagedObject(\"addAggregation\", sAggregationName, oObject, bSuppressInvalidate);\r\n\t\treturn this;\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.removeAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {\r\n\t\treturn this._callMethodInManagedObject(\"removeAggregation\", sAggregationName, oObject, bSuppressInvalidate);\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.removeAllAggregation = function (sAggregationName, bSuppressInvalidate) {\r\n\t\treturn this._callMethodInManagedObject(\"removeAllAggregation\", sAggregationName, bSuppressInvalidate);\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.destroyAggregation = function (sAggregationName, bSuppressInvalidate) {\r\n\t\tthis._callMethodInManagedObject(\"destroyAggregation\", sAggregationName, bSuppressInvalidate);\r\n\t\treturn this;\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.getBinding = function (sAggregationName) {\r\n\t\treturn this._callMethodInManagedObject(\"getBinding\", sAggregationName);\r\n\t};\r\n\r\n\r\n\tMultiInputDialog.prototype.getBindingInfo = function (sAggregationName) {\r\n\t\treturn this._callMethodInManagedObject(\"getBindingInfo\", sAggregationName);\r\n\t};\r\n\r\n\tMultiInputDialog.prototype.getBindingPath = function (sAggregationName) {\r\n\t\treturn this._callMethodInManagedObject(\"getBindingPath\", sAggregationName);\r\n\t};\r\n\t\r\n\t/*\r\n\t* Override the exit method to free local resources and destroy \r\n\t* @public\r\n\t*/\t\r\n\tMultiInputDialog.prototype.exit = function() {\r\n\t\t// do something here to free resources ;)\r\n\t\tthis.__valueHelpCurrentFilter = undefined;\r\n\t};\r\n\t\r\n\treturn MultiInputDialog;\r\n\r\n}, /* bExport= */ true);",
		"it/designfuture/multiinputdialog/MultiInputDialogRenderer.js": "/*!\r\n * ${copyright}\r\n */\r\n\r\nsap.ui.define(['jquery.sap.global', 'sap/m/MultiInputRenderer'],\r\n\tfunction(jQuery, MultiInputRenderer) {\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * MultiInputDialogRenderer renderer.\r\n\t * @static\r\n\t * @namespace\r\n\t */\r\n\tvar MultiInputDialogRenderer = MultiInputRenderer.extend(\"it.designfuture.multiinputdialog.MultiInputDialogRenderer\");\r\n\t\r\n\treturn MultiInputDialogRenderer;\r\n\r\n}, /* bExport= */ true);"
	}
});